// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <Rcpp.h>

using namespace Rcpp;

// pam
S4 pam(NumericVector rdist, int n, int k, int maxiter);
RcppExport SEXP _fastkmedoids_pam(SEXP rdistSEXP, SEXP nSEXP, SEXP kSEXP, SEXP maxiterSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type rdist(rdistSEXP);
    Rcpp::traits::input_parameter< int >::type n(nSEXP);
    Rcpp::traits::input_parameter< int >::type k(kSEXP);
    Rcpp::traits::input_parameter< int >::type maxiter(maxiterSEXP);
    rcpp_result_gen = Rcpp::wrap(pam(rdist, n, k, maxiter));
    return rcpp_result_gen;
END_RCPP
}
// fastpam
S4 fastpam(NumericVector rdist, int n, int k, int maxiter, std::string initializer, double fasttol, int seed);
RcppExport SEXP _fastkmedoids_fastpam(SEXP rdistSEXP, SEXP nSEXP, SEXP kSEXP, SEXP maxiterSEXP, SEXP initializerSEXP, SEXP fasttolSEXP, SEXP seedSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type rdist(rdistSEXP);
    Rcpp::traits::input_parameter< int >::type n(nSEXP);
    Rcpp::traits::input_parameter< int >::type k(kSEXP);
    Rcpp::traits::input_parameter< int >::type maxiter(maxiterSEXP);
    Rcpp::traits::input_parameter< std::string >::type initializer(initializerSEXP);
    Rcpp::traits::input_parameter< double >::type fasttol(fasttolSEXP);
    Rcpp::traits::input_parameter< int >::type seed(seedSEXP);
    rcpp_result_gen = Rcpp::wrap(fastpam(rdist, n, k, maxiter, initializer, fasttol, seed));
    return rcpp_result_gen;
END_RCPP
}
// fastclara
S4 fastclara(NumericVector rdist, int n, int k, int maxiter, std::string initializer, double fasttol, int numsamples, double sampling, bool independent, int seed);
RcppExport SEXP _fastkmedoids_fastclara(SEXP rdistSEXP, SEXP nSEXP, SEXP kSEXP, SEXP maxiterSEXP, SEXP initializerSEXP, SEXP fasttolSEXP, SEXP numsamplesSEXP, SEXP samplingSEXP, SEXP independentSEXP, SEXP seedSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type rdist(rdistSEXP);
    Rcpp::traits::input_parameter< int >::type n(nSEXP);
    Rcpp::traits::input_parameter< int >::type k(kSEXP);
    Rcpp::traits::input_parameter< int >::type maxiter(maxiterSEXP);
    Rcpp::traits::input_parameter< std::string >::type initializer(initializerSEXP);
    Rcpp::traits::input_parameter< double >::type fasttol(fasttolSEXP);
    Rcpp::traits::input_parameter< int >::type numsamples(numsamplesSEXP);
    Rcpp::traits::input_parameter< double >::type sampling(samplingSEXP);
    Rcpp::traits::input_parameter< bool >::type independent(independentSEXP);
    Rcpp::traits::input_parameter< int >::type seed(seedSEXP);
    rcpp_result_gen = Rcpp::wrap(fastclara(rdist, n, k, maxiter, initializer, fasttol, numsamples, sampling, independent, seed));
    return rcpp_result_gen;
END_RCPP
}
// fastclarans
S4 fastclarans(NumericVector rdist, int n, int k, int numlocal, double maxneighbor, int seed);
RcppExport SEXP _fastkmedoids_fastclarans(SEXP rdistSEXP, SEXP nSEXP, SEXP kSEXP, SEXP numlocalSEXP, SEXP maxneighborSEXP, SEXP seedSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type rdist(rdistSEXP);
    Rcpp::traits::input_parameter< int >::type n(nSEXP);
    Rcpp::traits::input_parameter< int >::type k(kSEXP);
    Rcpp::traits::input_parameter< int >::type numlocal(numlocalSEXP);
    Rcpp::traits::input_parameter< double >::type maxneighbor(maxneighborSEXP);
    Rcpp::traits::input_parameter< int >::type seed(seedSEXP);
    rcpp_result_gen = Rcpp::wrap(fastclarans(rdist, n, k, numlocal, maxneighbor, seed));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_fastkmedoids_pam", (DL_FUNC) &_fastkmedoids_pam, 4},
    {"_fastkmedoids_fastpam", (DL_FUNC) &_fastkmedoids_fastpam, 7},
    {"_fastkmedoids_fastclara", (DL_FUNC) &_fastkmedoids_fastclara, 10},
    {"_fastkmedoids_fastclarans", (DL_FUNC) &_fastkmedoids_fastclarans, 6},
    {NULL, NULL, 0}
};

RcppExport void R_init_fastkmedoids(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
